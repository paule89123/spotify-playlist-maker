{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","term","setTerm","className","placeholder","onChange","event","target","value","onClick","onSearch","Track","addTrack","onAdd","track","removeTrack","onRemove","name","artist","isRemoval","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","accessToken","onNameChange","defaultValue","playlistTracks","playlistName","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","search","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","setSearchResults","setPlaylistName","setPlaylistTracks","i","arrayCopy","push","filter","item","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73eaca1b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './SearchBar.css'\n\nfunction SearchBar(props) {\n\tconst [ term, setTerm ] = useState(\"\")\n\n\tfunction search() {\n\t\tprops.onSearch(term)\n\t}\n\n\tfunction handleTermChange(event) {\n\t\tsetTerm(event.target.value)\n\t}\n\treturn (\n\t\t<div className=\"SearchBar\">\n\t\t\t<input placeholder=\"Enter A Song, Album, or Artist...\" onChange={handleTermChange}/>\n\t\t\t<button onClick={search} className=\"SearchButton capitalised\">SEARCH</button>\n\t\t</div>\n\t)\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nfunction Track(props) {\n    function renderAction() {\n        if (props.isRemoval) {\n            return <button onClick={removeTrack} className=\"Track__plusminus\">-</button>\n        } \n        else {\n            return <button onClick={addTrack} className=\"Track__plusminus\">+</button>\n        }\n    }\n    function addTrack() {\n    \tprops.onAdd(props.track)\n    }\n    function removeTrack() {\n    \tprops.onRemove(props.track)\n    }\n    return (\n        <div className=\"Track\">\n            <div className=\"Track__text\">\n                <div className=\"Track__text__trackname\">{props.track.name}</div>\n                <div className=\"Track__text__artistname\">{props.track.artist}</div>\n            </div>\n            {renderAction()}\n        </div>\n    )\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nfunction TrackList(props) {\n    return (\n        <div className=\"TrackList\">\n            {props.tracks.map(track => \n                {return <Track isRemoval={props.isRemoval} track={track} key={track.id} onAdd={props.onAdd} onRemove={props.onRemove} />}\n                )\n            }\n        </div>\n    )\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css'\nimport TrackList from '../TrackList/TrackList'\n\nfunction SearchResults(props) {\n\treturn (\n\t\t<div className=\"SearchResults\">\n\t\t\t<div className=\"heading capitalised\">SEARCH RESULTS</div>\n\t\t\t<TrackList onAdd={props.onAdd} isRemoval={false} tracks={props.searchResults} />\n\t\t</div>\n\t)\n}\n\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css'\nimport TrackList from '../TrackList/TrackList'\n\nfunction Playlist(props) {\n\tfunction handleNameChange(event) {\n\t\tlet name = event.target.value;\n\t\tprops.onNameChange(name);\n\t};\n\treturn (\n\t\t<div className=\"Playlist\">\n\t\t\t<div className=\"heading capitalised\">PLAYLIST</div>\n\t\t\t<input onChange={handleNameChange} defaultValue={'Name Your Playlist...'}/>\n\t\t\t<TrackList tracks={props.playlistTracks} playlistName={props.playlistName} isRemoval={true} onRemove={props.onRemove} />\n\t\t\t<button className=\"Playlist-save\" onClick={props.onSave}><span className=\"capitalised\">SAVE TO SPOTIFY</span></button>\n\t\t</div>\n\t)\n}\n\n\nexport default Playlist;","let accessToken;\nconst clientId = \"7fcb6b41c57645c9ab17caf988117bcb\";\nconst redirectUri = 'http://localhost:3000/'\n\nconst Spotify = {\n\tgetAccessToken() {\n\t\tif (accessToken) {\n\t\t\treturn accessToken;\n\t\t}\n\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n\t\tconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n\t\tif (accessTokenMatch && expiresInMatch) {\n\t\t\taccessToken = accessTokenMatch[1];\n\t\t\tconst expiresIn = Number(expiresInMatch[1]);\n\t\t\twindow.setTimeout(() => accessToken = '', expiresIn * 1000);\n\t\t\twindow.history.pushState('Access Token', null, '/');\n\t\t\treturn accessToken;\n\t\t} else {\n\t\t\tconst accessURL = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n\t\t\twindow.location  = accessURL;\n\t\t}\n\t},\n\tsearch(term) {\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n\t\t\t\t\t\t{ headers: \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t ).then(response => {\n\t\t\t\t\t\t\t\t\t\treturn response.json();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t ).then(jsonResponse =>  {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!jsonResponse.tracks) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn jsonResponse.tracks.items.map(track => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: track.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: track.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tartist: track.artists[0].name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talbum: track.album.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\turi: track.uri\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t   )\n\t},\n\tsavePlaylist(name, trackUris) {\n\t\tif (!name || !trackUris.length) {\n\t\t\treturn\n\t\t}\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\tconst headers = { Authorization: `Bearer ${accessToken}`};\n\t\tlet userId;\n\n\t\treturn fetch ('https://api.spotify.com/v1/me', \n\t\t\t\t\t\t{ headers: headers }\n\t\t\t\t\t ).then(response => response.json()\n\t\t\t\t\t ).then(jsonResponse => {\n\t\t\t\t\t\tuserId = jsonResponse.id;\n\t\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n\t\t\t\t\t\t\t\t\t\t{\theaders: headers,\n\t\t\t\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\t\t\t\tbody: JSON.stringify({ name: name })\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t).then(response => response.json()\n\t\t\t\t\t\t\t\t\t).then(jsonResponse => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst playlistId = jsonResponse.id;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theaders: headers,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbody: JSON.stringify({ uris: trackUris })\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t   })\t\n\t\t\t}\n}\n\nexport default Spotify;\n\n\n\n\n\n\n\n\n\n\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify'\n\nfunction App(props) {\n\n\tconst [ searchResults, setSearchResults ] = useState([])\n\tconst [ playlistName, setPlaylistName ] = useState(\"My Playlist\")\n\tconst [ playlistTracks, setPlaylistTracks ] = useState([])\n\n\tfunction addTrack(track) {\n\t\tfor (let i=0; i<playlistTracks.length; i++) {\n\t\t\tif (playlistTracks[i].id === track.id) {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tlet arrayCopy = [...playlistTracks]\n\t\tarrayCopy.push(track)\n\t\tsetPlaylistTracks(arrayCopy)\n\t}\n\n\tfunction removeTrack(track) {\n\t\tlet arrayCopy = playlistTracks.filter(item => item.id !== track.id);\n\t\tsetPlaylistTracks(arrayCopy)\n\t}\n\n\tfunction updatePlaylistName(name) {\n\t\tsetPlaylistName(name)\n\t}\n\n\tfunction savePlaylist() {\n\t\tconst trackUris = playlistTracks.map(track => track.uri);\n\t\tSpotify.savePlaylist(playlistName, trackUris).then(() => {\n\t\t\tsetPlaylistName('New Playlist')\n\t\t\tsetPlaylistTracks([])\n\t\t})\n\t}\n\n\tfunction search(term) {\n\t\tSpotify.search(term).then(searchResults => {\n\t\t\tsetSearchResults(searchResults)\n\t\t})\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1><span className=\"title1\">CREATE</span><br /><span className=\"title2\">Spotify Playlists</span></h1>\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"App__left-column\">\n\t\t\t\t\t<SearchBar onSearch={search} />\n\t\t\t\t\t<SearchResults searchResults={searchResults} onAdd={addTrack} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"App__right-column\">\n\t\t\t\t\t<Playlist playlistTracks={playlistTracks} playlistName={playlistName} onRemove={removeTrack} onNameChange={updatePlaylistName} onSave={savePlaylist} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}